Line  Loc   Code         Source
    1                   ; mem loader is able to load ram memory from serial port and then jump to code execution 
    2                   ; this way we can load progams from serial prot 
    3                   ;
    4                   ; message format:
    5                   ; aAbbbbb....x where a is start address low byte, A is the start address high bute, 
    6                   ; b - this are the data bytes, x - is the fisnish command 
    7                   ; x - can be: '$' finish memory load, new address and data can be provided. 
    8                   ;             '!' jump to address, this allows  to load a memory block, and execute it 
    9                   ;                 or just to execute it 
   10                   ; a,A and B are expected of 8 bit hex format, eg. 00, 12, ab, a0, 0a, 1c, f4,....
   11                   ; after the jump, the new routine test controll of the cpu
   12                   
   13                   init_mem_loader: {
   14  f046  6403        stz LOADER_STATE
   15  f048  6406        stz BYTES_LOADED
   16  f04a  6408        stz TMP_BYTE
   17  f04c  6407        stz NIBLE_LOAD
   18  f04e  60          rts 
   19                   }
   20                   
   21                   handle_mem_load: {
   22                     { ; switch TMP_VAR_0
   23  f04f  a500          lda TMP_VAR_0
   24                       ; case
   25  f051  c924          cmpi '$'
   26  f053  f007          beq load_done
   27                       ; case
   28  f055  c921          cmpi '!'
   29  f057  f072          beq execute_code
   30                       ; default
   31  f059  4c63f0        jmp load_byte
   32                       ; load_byte will return
   33                   
   34                       load_done:
   35  f05c  2046f0          jsr init_mem_loader
   36  f05f  60              rts
   37                       exec_code:
   38  f060  4ccbf0          jmp execute_code
   39                         ; execute_code will return
   40                     }
   41                   
   42                     load_byte: {
   43                       ; convert two chars like 'fa' into one byte
   44  f063  2081f0        jsr cvt_nibble
   45                   
   46  f066  8502          sta TMP_VAR_2 
   47  f068  a508          lda TMP_BYTE 
   48  f06a  0a            asl a
   49  f06b  0a            asl a
   50  f06c  0a            asl a
   51  f06d  0a            asl a
   52  f06e  0502          ora TMP_VAR_2
   53  f070  8508          sta TMP_BYTE
   54  f072  a901          ldai 0x01 
   55  f074  2507          and NIBLE_LOAD
   56  f076  f006          beq first_nibble
   57  f078  6407          stz NIBLE_LOAD ; this was the second nibble
   58  f07a  20a6f0        jsr handle_byte
   59  f07d  60            rts
   60                       first_nibble:
   61  f07e  e607          inc NIBLE_LOAD
   62  f080  60            rts
   63                     }
   64                   
   65                     cvt_nibble: {
   66                       ; convert a char into a nibble 
   67  f081  c930          cmpi '0'
   68  f083  b001          bcs step_1 ; >= '0'
   69  f085  60            rts ; < '0'
   70                   
   71                       step_1:
   72  f086  c93a          cmpi ':'
   73  f088  b003          bcs step_2 ; >= ':'
   74  f08a  4c9af0        jmp cvt_0_9 ; < ':'
   75                   
   76                       step_2:
   77  f08d  c961          cmpi 'a'
   78  f08f  b001          bcs step_3 ; >= 'a'
   79  f091  60            rts
   80                   
   81                       step_3:
   82  f092  c967          cmpi 'g'
   83  f094  b003          bcs ret ; >= 'g'
   84  f096  4ca0f0        jmp cvt_a_f ; < 'g'
   85                       
   86                       ret:
   87  f099  60            rts
   88                       cvt_0_9: { 
   89                         ; convert '0' to '9' into 0 to 9
   90  f09a  18              clc
   91  f09b  a9d0            ldai 0x100 - '0'
   92  f09d  6500            adc TMP_VAR_0
   93  f09f  60              rts
   94                       }
   95                       cvt_a_f: {
   96                         ; convert 'a' to 'f' into 10 to 15
   97  f0a0  18              clc
   98  f0a1  a9a9            ldai 0x100 - 'W' 
   99  f0a3  6500            adc TMP_VAR_0
  100  f0a5  60              rts
  101                       }
  102                     }
  103                   
  104                     handle_byte: {
  105  f0a6  a503          lda LOADER_STATE
  106  f0a8  c900          cmpi 0x00
  107  f0aa  f008          beq handle_addr_1
  108  f0ac  c901          cmpi 0x01 
  109  f0ae  f00b          beq handle_addr_2
  110  f0b0  c902          cmpi 0x02 
  111  f0b2  f00e          beq handle_data
  112                   
  113                       handle_addr_1: {
  114  f0b4  e603            inc LOADER_STATE
  115  f0b6  a508            lda TMP_BYTE 
  116  f0b8  8505            sta LOAD_ADDR+1
  117  f0ba  60              rts
  118                       }
  119                   
  120                       handle_addr_2: {
  121  f0bb  e603            inc LOADER_STATE
  122  f0bd  a508            lda TMP_BYTE 
  123  f0bf  8504            sta LOAD_ADDR
  124  f0c1  60              rts
  125                       }
  126                   
  127                       handle_data:{
  128  f0c2  a508            lda TMP_BYTE
  129  f0c4  a406            ldy BYTES_LOADED
  130  f0c6  9104            sta [LOAD_ADDR],y
  131  f0c8  e606            inc BYTES_LOADED 
  132  f0ca  60              rts
  133                       }
  134                     }
  135                   
  136                     execute_code: {
  137  f0cb  a200          ldxi 0x00 
  138  f0cd  9a            txs 
  139                   
  140  f0ce  a504          lda LOAD_ADDR
  141  f0d0  d002          bne skip 
  142  f0d2  c605          dec LOAD_ADDR+1
  143                     skip: 
  144  f0d4  c604          dec LOAD_ADDR
  145                   
  146  f0d6  a505          lda LOAD_ADDR+1
  147  f0d8  48            pha 
  148  f0d9  a504          lda LOAD_ADDR 
  149  f0db  48            pha 
  150  f0dc  60            rts ; this should return to the new address
  151                     }
  152                   }
  153                   
  154                   
