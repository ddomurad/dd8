package w65c02

type W65C02StatusRegister int

const (
	SR_NEGATIVE W65C02StatusRegister = 0
	SR_OVERFLOW W65C02StatusRegister = 1
	// skip
	SR_BRK         W65C02StatusRegister = 3
	SR_DECIMAL     W65C02StatusRegister = 4
	SR_IRQ_DISABLE W65C02StatusRegister = 5
	SR_ZERO        W65C02StatusRegister = 6
	SR_CARRY       W65C02StatusRegister = 7
)

type W65C02CoreState struct {
	PC      uint16
	A, X, Y uint8
	P, S    uint8
	TCU     uint8

	RstSeq uint8

	nextPC  uint16
	opCode  uint8
	prevClk bool
}

type W65C02Core struct {
	PHI2  bool
	PHI1O bool
	PHI2O bool

	RESB bool
	MLB  bool
	RWB  bool
	SYNC bool
	VPB  bool

	A uint16
	D uint8

	D_buf uint8
	State W65C02CoreState
}

func (c W65C02CoreState) GetSR(sr W65C02StatusRegister) bool {
	return c.P&(1<<sr) == 1<<sr
}

func (c *W65C02CoreState) SetSR(sr W65C02StatusRegister, v bool) {
	if v {
		c.P |= 1 << sr
	} else {
		c.P &= ^(1 << sr)
	}
}

func (mcu *W65C02Core) Init() {
	mcu.MLB = true
	mcu.RWB = true
	mcu.VPB = true
	mcu.SYNC = false

	mcu.A = 0xfffc
	mcu.D = 0x00

}

func (m *W65C02Core) Update() {
	if m.PHI2 != m.State.prevClk {
		if m.PHI2 {
			m.clkHighTransition()
		} else {
			m.clkLowTransition()
		}

		m.State.prevClk = m.PHI2

	}
	if m.PHI2 {
		m.updateClkHigh()
	} else {
		m.updateClkLow()
	}
}

func (m *W65C02Core) clkHighTransition() {
}

func (m *W65C02Core) clkLowTransition() {
	if m.State.RstSeq < 2 {
		m.State.RstSeq++
	} else {
		m.State.TCU++
		// m.State.PC++
	}
}

func (m *W65C02Core) updateClkHigh() {
	if m.State.RstSeq == 0 {
		m.State.PC = uint16(m.D)
		return
	}
	if m.State.RstSeq == 1 {
		m.State.PC |= uint16(m.D) << 8
		return
	}

	m.D_buf = m.D
}

func (m *W65C02Core) updateClkLow() {
	if m.State.RstSeq == 0 {
		m.A = 0xfffc
		return
	}
	if m.State.RstSeq == 1 {
		m.A = 0xfffd
		m.State.TCU = 0x00
		return
	}

	m.A = m.State.PC
	m.handleOpcode()
}

func (m *W65C02Core) handleOpcode() {
	if m.State.TCU == 0 {
		m.SYNC = true
		return
	} else {
		m.SYNC = false
	}

	if m.State.TCU == 1 {
		m.State.opCode = m.D_buf
	}

	if m.State.opCode == OpCode_CLC {
		switch m.State.TCU {
		case 1:
			m.State.nextPC = m.State.PC + 1
		case 2:
			m.State.TCU = 0x00
			m.State.SetSR(SR_CARRY, false)
			m.State.nextPC = m.State.PC
			return
		default:
			panic("unexpected TCU")
		}
	}

	// if m.State.TCU == 1 {
	// 	m.State.opCode = m.D_buf
	//
	// 	if m.D_buf == OpCode_CLC {
	// 		m.State.TCU = 0x00
	// 		m.State.SetSR(SR_CARRY, false)
	// 	}
	//
	// 	if m.D_buf == OpCode_JSR { //nolint
	// 	}
	// }
	//
	// if m.State.TCU == 2 {
	// 	if m.State.opCode == OpCode_JSR {
	// 	}
	// }
}
