// Code generated from DD8ASM.g4 by ANTLR 4.13.1. DO NOT EDIT.

package parser

import (
	"fmt"
	"github.com/antlr4-go/antlr/v4"
	"sync"
	"unicode"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type DD8ASMLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var DD8ASMLexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	ChannelNames           []string
	ModeNames              []string
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func dd8asmlexerLexerInit() {
	staticData := &DD8ASMLexerLexerStaticData
	staticData.ChannelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	}
	staticData.ModeNames = []string{
		"DEFAULT_MODE",
	}
	staticData.LiteralNames = []string{
		"", "'('", "')'", "','", "'@'", "'}'", "':='", "'['", "']'", "'<'",
		"'>'", "'~'", "'.l'", "'.h'", "'.len'", "'*'", "'/'", "'%'", "'+'",
		"'-'", "'<<'", "'>>'", "'&'", "'^'", "'|'", "':'", "'.def'", "'.tmpl'",
		"'.rep'", "'.func'", "'{'", "'.org'", "'.inc'", "'.db'", "'.dw'", "'.byte'",
		"'.word'",
	}
	staticData.SymbolicNames = []string{
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "P_DEF", "P_TMPL", "P_REP", "P_FUNC",
		"P_BLOCK", "P_ORG", "P_INC", "P_DB", "P_DW", "P_BYTE", "P_WORD", "REG",
		"STR", "RUNE", "HEX_NUM", "BIN_NUM", "DEC_NUM", "NAME", "COMMENT", "EOL",
		"WS",
	}
	staticData.RuleNames = []string{
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8",
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16",
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24",
		"P_DEF", "P_TMPL", "P_REP", "P_FUNC", "P_BLOCK", "P_ORG", "P_INC", "P_DB",
		"P_DW", "P_BYTE", "P_WORD", "REG", "STR", "RUNE", "HEX_NUM", "BIN_NUM",
		"DEC_NUM", "NAME", "COMMENT", "EOL", "WS",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 46, 270, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2,
		4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2,
		10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15,
		7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7,
		20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25,
		2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2,
		31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36,
		7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7,
		41, 2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 1, 0, 1, 0,
		1, 1, 1, 1, 1, 2, 1, 2, 1, 3, 1, 3, 1, 4, 1, 4, 1, 5, 1, 5, 1, 5, 1, 6,
		1, 6, 1, 7, 1, 7, 1, 8, 1, 8, 1, 9, 1, 9, 1, 10, 1, 10, 1, 11, 1, 11, 1,
		11, 1, 12, 1, 12, 1, 12, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 14, 1, 14,
		1, 15, 1, 15, 1, 16, 1, 16, 1, 17, 1, 17, 1, 18, 1, 18, 1, 19, 1, 19, 1,
		19, 1, 20, 1, 20, 1, 20, 1, 21, 1, 21, 1, 22, 1, 22, 1, 23, 1, 23, 1, 24,
		1, 24, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 26, 1, 26, 1, 26, 1, 26, 1,
		26, 1, 26, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 28, 1, 28, 1, 28, 1, 28,
		1, 28, 1, 28, 1, 29, 1, 29, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 31, 1,
		31, 1, 31, 1, 31, 1, 31, 1, 32, 1, 32, 1, 32, 1, 32, 1, 33, 1, 33, 1, 33,
		1, 33, 1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 1, 35, 1, 35, 1, 35, 1,
		35, 1, 35, 1, 35, 1, 36, 1, 36, 1, 37, 1, 37, 1, 37, 1, 37, 5, 37, 212,
		8, 37, 10, 37, 12, 37, 215, 9, 37, 1, 37, 1, 37, 1, 38, 1, 38, 1, 38, 1,
		38, 1, 39, 1, 39, 1, 39, 1, 39, 4, 39, 227, 8, 39, 11, 39, 12, 39, 228,
		1, 40, 1, 40, 1, 40, 1, 40, 4, 40, 235, 8, 40, 11, 40, 12, 40, 236, 1,
		41, 4, 41, 240, 8, 41, 11, 41, 12, 41, 241, 1, 42, 1, 42, 4, 42, 246, 8,
		42, 11, 42, 12, 42, 247, 1, 42, 3, 42, 251, 8, 42, 1, 43, 1, 43, 5, 43,
		255, 8, 43, 10, 43, 12, 43, 258, 9, 43, 1, 43, 1, 43, 1, 44, 4, 44, 263,
		8, 44, 11, 44, 12, 44, 264, 1, 45, 1, 45, 1, 45, 1, 45, 0, 0, 46, 1, 1,
		3, 2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7, 15, 8, 17, 9, 19, 10, 21, 11, 23,
		12, 25, 13, 27, 14, 29, 15, 31, 16, 33, 17, 35, 18, 37, 19, 39, 20, 41,
		21, 43, 22, 45, 23, 47, 24, 49, 25, 51, 26, 53, 27, 55, 28, 57, 29, 59,
		30, 61, 31, 63, 32, 65, 33, 67, 34, 69, 35, 71, 36, 73, 37, 75, 38, 77,
		39, 79, 40, 81, 41, 83, 42, 85, 43, 87, 44, 89, 45, 91, 46, 1, 0, 29, 2,
		0, 76, 76, 108, 108, 2, 0, 72, 72, 104, 104, 2, 0, 69, 69, 101, 101, 2,
		0, 78, 78, 110, 110, 2, 0, 68, 68, 100, 100, 2, 0, 70, 70, 102, 102, 2,
		0, 84, 84, 116, 116, 2, 0, 77, 77, 109, 109, 2, 0, 80, 80, 112, 112, 2,
		0, 82, 82, 114, 114, 2, 0, 85, 85, 117, 117, 2, 0, 67, 67, 99, 99, 2, 0,
		79, 79, 111, 111, 2, 0, 71, 71, 103, 103, 2, 0, 73, 73, 105, 105, 2, 0,
		66, 66, 98, 98, 2, 0, 87, 87, 119, 119, 2, 0, 89, 89, 121, 121, 4, 0, 65,
		65, 88, 90, 97, 97, 120, 122, 3, 0, 10, 10, 13, 13, 34, 34, 2, 0, 88, 88,
		120, 120, 4, 0, 48, 57, 65, 70, 95, 95, 97, 102, 2, 0, 48, 49, 95, 95,
		2, 0, 48, 57, 95, 95, 3, 0, 65, 90, 95, 95, 97, 122, 5, 0, 45, 45, 48,
		57, 65, 90, 95, 95, 97, 122, 2, 0, 66, 87, 98, 119, 2, 0, 10, 10, 13, 13,
		2, 0, 9, 9, 32, 32, 278, 0, 1, 1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 5, 1, 0,
		0, 0, 0, 7, 1, 0, 0, 0, 0, 9, 1, 0, 0, 0, 0, 11, 1, 0, 0, 0, 0, 13, 1,
		0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 17, 1, 0, 0, 0, 0, 19, 1, 0, 0, 0, 0, 21,
		1, 0, 0, 0, 0, 23, 1, 0, 0, 0, 0, 25, 1, 0, 0, 0, 0, 27, 1, 0, 0, 0, 0,
		29, 1, 0, 0, 0, 0, 31, 1, 0, 0, 0, 0, 33, 1, 0, 0, 0, 0, 35, 1, 0, 0, 0,
		0, 37, 1, 0, 0, 0, 0, 39, 1, 0, 0, 0, 0, 41, 1, 0, 0, 0, 0, 43, 1, 0, 0,
		0, 0, 45, 1, 0, 0, 0, 0, 47, 1, 0, 0, 0, 0, 49, 1, 0, 0, 0, 0, 51, 1, 0,
		0, 0, 0, 53, 1, 0, 0, 0, 0, 55, 1, 0, 0, 0, 0, 57, 1, 0, 0, 0, 0, 59, 1,
		0, 0, 0, 0, 61, 1, 0, 0, 0, 0, 63, 1, 0, 0, 0, 0, 65, 1, 0, 0, 0, 0, 67,
		1, 0, 0, 0, 0, 69, 1, 0, 0, 0, 0, 71, 1, 0, 0, 0, 0, 73, 1, 0, 0, 0, 0,
		75, 1, 0, 0, 0, 0, 77, 1, 0, 0, 0, 0, 79, 1, 0, 0, 0, 0, 81, 1, 0, 0, 0,
		0, 83, 1, 0, 0, 0, 0, 85, 1, 0, 0, 0, 0, 87, 1, 0, 0, 0, 0, 89, 1, 0, 0,
		0, 0, 91, 1, 0, 0, 0, 1, 93, 1, 0, 0, 0, 3, 95, 1, 0, 0, 0, 5, 97, 1, 0,
		0, 0, 7, 99, 1, 0, 0, 0, 9, 101, 1, 0, 0, 0, 11, 103, 1, 0, 0, 0, 13, 106,
		1, 0, 0, 0, 15, 108, 1, 0, 0, 0, 17, 110, 1, 0, 0, 0, 19, 112, 1, 0, 0,
		0, 21, 114, 1, 0, 0, 0, 23, 116, 1, 0, 0, 0, 25, 119, 1, 0, 0, 0, 27, 122,
		1, 0, 0, 0, 29, 127, 1, 0, 0, 0, 31, 129, 1, 0, 0, 0, 33, 131, 1, 0, 0,
		0, 35, 133, 1, 0, 0, 0, 37, 135, 1, 0, 0, 0, 39, 137, 1, 0, 0, 0, 41, 140,
		1, 0, 0, 0, 43, 143, 1, 0, 0, 0, 45, 145, 1, 0, 0, 0, 47, 147, 1, 0, 0,
		0, 49, 149, 1, 0, 0, 0, 51, 151, 1, 0, 0, 0, 53, 156, 1, 0, 0, 0, 55, 162,
		1, 0, 0, 0, 57, 167, 1, 0, 0, 0, 59, 173, 1, 0, 0, 0, 61, 175, 1, 0, 0,
		0, 63, 180, 1, 0, 0, 0, 65, 185, 1, 0, 0, 0, 67, 189, 1, 0, 0, 0, 69, 193,
		1, 0, 0, 0, 71, 199, 1, 0, 0, 0, 73, 205, 1, 0, 0, 0, 75, 207, 1, 0, 0,
		0, 77, 218, 1, 0, 0, 0, 79, 222, 1, 0, 0, 0, 81, 230, 1, 0, 0, 0, 83, 239,
		1, 0, 0, 0, 85, 250, 1, 0, 0, 0, 87, 252, 1, 0, 0, 0, 89, 262, 1, 0, 0,
		0, 91, 266, 1, 0, 0, 0, 93, 94, 5, 40, 0, 0, 94, 2, 1, 0, 0, 0, 95, 96,
		5, 41, 0, 0, 96, 4, 1, 0, 0, 0, 97, 98, 5, 44, 0, 0, 98, 6, 1, 0, 0, 0,
		99, 100, 5, 64, 0, 0, 100, 8, 1, 0, 0, 0, 101, 102, 5, 125, 0, 0, 102,
		10, 1, 0, 0, 0, 103, 104, 5, 58, 0, 0, 104, 105, 5, 61, 0, 0, 105, 12,
		1, 0, 0, 0, 106, 107, 5, 91, 0, 0, 107, 14, 1, 0, 0, 0, 108, 109, 5, 93,
		0, 0, 109, 16, 1, 0, 0, 0, 110, 111, 5, 60, 0, 0, 111, 18, 1, 0, 0, 0,
		112, 113, 5, 62, 0, 0, 113, 20, 1, 0, 0, 0, 114, 115, 5, 126, 0, 0, 115,
		22, 1, 0, 0, 0, 116, 117, 5, 46, 0, 0, 117, 118, 7, 0, 0, 0, 118, 24, 1,
		0, 0, 0, 119, 120, 5, 46, 0, 0, 120, 121, 7, 1, 0, 0, 121, 26, 1, 0, 0,
		0, 122, 123, 5, 46, 0, 0, 123, 124, 7, 0, 0, 0, 124, 125, 7, 2, 0, 0, 125,
		126, 7, 3, 0, 0, 126, 28, 1, 0, 0, 0, 127, 128, 5, 42, 0, 0, 128, 30, 1,
		0, 0, 0, 129, 130, 5, 47, 0, 0, 130, 32, 1, 0, 0, 0, 131, 132, 5, 37, 0,
		0, 132, 34, 1, 0, 0, 0, 133, 134, 5, 43, 0, 0, 134, 36, 1, 0, 0, 0, 135,
		136, 5, 45, 0, 0, 136, 38, 1, 0, 0, 0, 137, 138, 5, 60, 0, 0, 138, 139,
		5, 60, 0, 0, 139, 40, 1, 0, 0, 0, 140, 141, 5, 62, 0, 0, 141, 142, 5, 62,
		0, 0, 142, 42, 1, 0, 0, 0, 143, 144, 5, 38, 0, 0, 144, 44, 1, 0, 0, 0,
		145, 146, 5, 94, 0, 0, 146, 46, 1, 0, 0, 0, 147, 148, 5, 124, 0, 0, 148,
		48, 1, 0, 0, 0, 149, 150, 5, 58, 0, 0, 150, 50, 1, 0, 0, 0, 151, 152, 5,
		46, 0, 0, 152, 153, 7, 4, 0, 0, 153, 154, 7, 2, 0, 0, 154, 155, 7, 5, 0,
		0, 155, 52, 1, 0, 0, 0, 156, 157, 5, 46, 0, 0, 157, 158, 7, 6, 0, 0, 158,
		159, 7, 7, 0, 0, 159, 160, 7, 8, 0, 0, 160, 161, 7, 0, 0, 0, 161, 54, 1,
		0, 0, 0, 162, 163, 5, 46, 0, 0, 163, 164, 7, 9, 0, 0, 164, 165, 7, 2, 0,
		0, 165, 166, 7, 8, 0, 0, 166, 56, 1, 0, 0, 0, 167, 168, 5, 46, 0, 0, 168,
		169, 7, 5, 0, 0, 169, 170, 7, 10, 0, 0, 170, 171, 7, 3, 0, 0, 171, 172,
		7, 11, 0, 0, 172, 58, 1, 0, 0, 0, 173, 174, 5, 123, 0, 0, 174, 60, 1, 0,
		0, 0, 175, 176, 5, 46, 0, 0, 176, 177, 7, 12, 0, 0, 177, 178, 7, 9, 0,
		0, 178, 179, 7, 13, 0, 0, 179, 62, 1, 0, 0, 0, 180, 181, 5, 46, 0, 0, 181,
		182, 7, 14, 0, 0, 182, 183, 7, 3, 0, 0, 183, 184, 7, 11, 0, 0, 184, 64,
		1, 0, 0, 0, 185, 186, 5, 46, 0, 0, 186, 187, 7, 4, 0, 0, 187, 188, 7, 15,
		0, 0, 188, 66, 1, 0, 0, 0, 189, 190, 5, 46, 0, 0, 190, 191, 7, 4, 0, 0,
		191, 192, 7, 16, 0, 0, 192, 68, 1, 0, 0, 0, 193, 194, 5, 46, 0, 0, 194,
		195, 7, 15, 0, 0, 195, 196, 7, 17, 0, 0, 196, 197, 7, 6, 0, 0, 197, 198,
		7, 2, 0, 0, 198, 70, 1, 0, 0, 0, 199, 200, 5, 46, 0, 0, 200, 201, 7, 16,
		0, 0, 201, 202, 7, 12, 0, 0, 202, 203, 7, 9, 0, 0, 203, 204, 7, 4, 0, 0,
		204, 72, 1, 0, 0, 0, 205, 206, 7, 18, 0, 0, 206, 74, 1, 0, 0, 0, 207, 213,
		5, 34, 0, 0, 208, 209, 5, 92, 0, 0, 209, 212, 5, 34, 0, 0, 210, 212, 8,
		19, 0, 0, 211, 208, 1, 0, 0, 0, 211, 210, 1, 0, 0, 0, 212, 215, 1, 0, 0,
		0, 213, 211, 1, 0, 0, 0, 213, 214, 1, 0, 0, 0, 214, 216, 1, 0, 0, 0, 215,
		213, 1, 0, 0, 0, 216, 217, 5, 34, 0, 0, 217, 76, 1, 0, 0, 0, 218, 219,
		5, 39, 0, 0, 219, 220, 9, 0, 0, 0, 220, 221, 5, 39, 0, 0, 221, 78, 1, 0,
		0, 0, 222, 223, 5, 48, 0, 0, 223, 224, 7, 20, 0, 0, 224, 226, 1, 0, 0,
		0, 225, 227, 7, 21, 0, 0, 226, 225, 1, 0, 0, 0, 227, 228, 1, 0, 0, 0, 228,
		226, 1, 0, 0, 0, 228, 229, 1, 0, 0, 0, 229, 80, 1, 0, 0, 0, 230, 231, 5,
		48, 0, 0, 231, 232, 7, 15, 0, 0, 232, 234, 1, 0, 0, 0, 233, 235, 7, 22,
		0, 0, 234, 233, 1, 0, 0, 0, 235, 236, 1, 0, 0, 0, 236, 234, 1, 0, 0, 0,
		236, 237, 1, 0, 0, 0, 237, 82, 1, 0, 0, 0, 238, 240, 7, 23, 0, 0, 239,
		238, 1, 0, 0, 0, 240, 241, 1, 0, 0, 0, 241, 239, 1, 0, 0, 0, 241, 242,
		1, 0, 0, 0, 242, 84, 1, 0, 0, 0, 243, 245, 7, 24, 0, 0, 244, 246, 7, 25,
		0, 0, 245, 244, 1, 0, 0, 0, 246, 247, 1, 0, 0, 0, 247, 245, 1, 0, 0, 0,
		247, 248, 1, 0, 0, 0, 248, 251, 1, 0, 0, 0, 249, 251, 7, 26, 0, 0, 250,
		243, 1, 0, 0, 0, 250, 249, 1, 0, 0, 0, 251, 86, 1, 0, 0, 0, 252, 256, 5,
		59, 0, 0, 253, 255, 8, 27, 0, 0, 254, 253, 1, 0, 0, 0, 255, 258, 1, 0,
		0, 0, 256, 254, 1, 0, 0, 0, 256, 257, 1, 0, 0, 0, 257, 259, 1, 0, 0, 0,
		258, 256, 1, 0, 0, 0, 259, 260, 6, 43, 0, 0, 260, 88, 1, 0, 0, 0, 261,
		263, 7, 27, 0, 0, 262, 261, 1, 0, 0, 0, 263, 264, 1, 0, 0, 0, 264, 262,
		1, 0, 0, 0, 264, 265, 1, 0, 0, 0, 265, 90, 1, 0, 0, 0, 266, 267, 7, 28,
		0, 0, 267, 268, 1, 0, 0, 0, 268, 269, 6, 45, 0, 0, 269, 92, 1, 0, 0, 0,
		10, 0, 211, 213, 228, 236, 241, 247, 250, 256, 264, 1, 6, 0, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// DD8ASMLexerInit initializes any static state used to implement DD8ASMLexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewDD8ASMLexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func DD8ASMLexerInit() {
	staticData := &DD8ASMLexerLexerStaticData
	staticData.once.Do(dd8asmlexerLexerInit)
}

// NewDD8ASMLexer produces a new lexer instance for the optional input antlr.CharStream.
func NewDD8ASMLexer(input antlr.CharStream) *DD8ASMLexer {
	DD8ASMLexerInit()
	l := new(DD8ASMLexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &DD8ASMLexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	l.channelNames = staticData.ChannelNames
	l.modeNames = staticData.ModeNames
	l.RuleNames = staticData.RuleNames
	l.LiteralNames = staticData.LiteralNames
	l.SymbolicNames = staticData.SymbolicNames
	l.GrammarFileName = "DD8ASM.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// DD8ASMLexer tokens.
const (
	DD8ASMLexerT__0    = 1
	DD8ASMLexerT__1    = 2
	DD8ASMLexerT__2    = 3
	DD8ASMLexerT__3    = 4
	DD8ASMLexerT__4    = 5
	DD8ASMLexerT__5    = 6
	DD8ASMLexerT__6    = 7
	DD8ASMLexerT__7    = 8
	DD8ASMLexerT__8    = 9
	DD8ASMLexerT__9    = 10
	DD8ASMLexerT__10   = 11
	DD8ASMLexerT__11   = 12
	DD8ASMLexerT__12   = 13
	DD8ASMLexerT__13   = 14
	DD8ASMLexerT__14   = 15
	DD8ASMLexerT__15   = 16
	DD8ASMLexerT__16   = 17
	DD8ASMLexerT__17   = 18
	DD8ASMLexerT__18   = 19
	DD8ASMLexerT__19   = 20
	DD8ASMLexerT__20   = 21
	DD8ASMLexerT__21   = 22
	DD8ASMLexerT__22   = 23
	DD8ASMLexerT__23   = 24
	DD8ASMLexerT__24   = 25
	DD8ASMLexerP_DEF   = 26
	DD8ASMLexerP_TMPL  = 27
	DD8ASMLexerP_REP   = 28
	DD8ASMLexerP_FUNC  = 29
	DD8ASMLexerP_BLOCK = 30
	DD8ASMLexerP_ORG   = 31
	DD8ASMLexerP_INC   = 32
	DD8ASMLexerP_DB    = 33
	DD8ASMLexerP_DW    = 34
	DD8ASMLexerP_BYTE  = 35
	DD8ASMLexerP_WORD  = 36
	DD8ASMLexerREG     = 37
	DD8ASMLexerSTR     = 38
	DD8ASMLexerRUNE    = 39
	DD8ASMLexerHEX_NUM = 40
	DD8ASMLexerBIN_NUM = 41
	DD8ASMLexerDEC_NUM = 42
	DD8ASMLexerNAME    = 43
	DD8ASMLexerCOMMENT = 44
	DD8ASMLexerEOL     = 45
	DD8ASMLexerWS      = 46
)
